package it.tcgroup.vilear.coursemanager.entity;


import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import it.tcgroup.vilear.coursemanager.entity.dto.PartnerDto;
import it.tcgroup.vilear.coursemanager.entity.enumerated.*;
import it.tcgroup.vilear.coursemanager.entity.jsonb.Attachment;
import it.tcgroup.vilear.coursemanager.entity.jsonb.dataType.JsonDataAddresType;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Type;
import org.hibernate.annotations.TypeDef;
import org.hibernate.annotations.TypeDefs;


import javax.persistence.*;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;
import java.util.*;

@Entity
@JsonIgnoreProperties({"hibernateLazyInitializer", "hibernate_lazy_initializer", "handler"})
@Table(name = "course")
/*per la richiesta extra
@TypeDefs({
        @TypeDef(name = "JsonDataAddressType", typeClass = JsonDataAddresType.class)
})*/

public class CourseEntity implements  Serializable {

    /*------------------------Declaratio---------------------------------------------------*/

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )

    @Type(type = "org.hibernate.type.PostgresUUIDType")
    private UUID id;

    @Column(name="title")
    private String title;

    @Column(name="maximum_number_of_learner")
    private int maximumNumberOfLearner;

    @Column(name="start_date")
    private Date startDate;

    @Column(name="last_update")
    private Date lastUpdate;

    @Column(name="state")
    @Enumerated(EnumType.STRING)
    private StateOfCourseEnum state;


    @Column(name="number_of_learner")
    private int numberOfLearner;

    @Column(name="id_creator")
    @Type(type = "org.hibernate.type.PostgresUUIDType")
    private UUID idCreator;

    /*----------------------------Autogenerated constructor---------------------------------------------------*/

    public CourseEntity(UUID id, String title, int maximumNumberOfLearner, Date startDate, Date lastUpdate, StateOfCourseEnum state, int numberOfLearner, UUID idCreatore) {
        this.id = id;
        this.title = title;
        this.maximumNumberOfLearner = maximumNumberOfLearner;
        this.startDate = startDate;
        this.lastUpdate = lastUpdate;
        this.state = state;
        this.numberOfLearner = numberOfLearner;
        this.idCreator = idCreatore;
    }

    public CourseEntity() {
    }

    /*------------------------------getters----------------------------------------------------------------*/

    public UUID getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public int getMaximumNumberOfLearner() {
        return maximumNumberOfLearner;
    }

    public Date getStartDate() {
        return startDate;
    }

    public Date getLastUpdate() {
        return lastUpdate;
    }

    public StateOfCourseEnum getState() {
        return state;
    }

    public int getNumberOfLearner() {
        return numberOfLearner;
    }

    public UUID getIdCreatore() {
        return idCreator;
    }

    /*---------------------setters all except for setid and setIdCreatore because of the safety of the programm*/

    public void setTitle(String title) {
        this.title = title;
    }

    public void setMaximumNumberOfLearner(int maximumNumberOfLearner) {
        this.maximumNumberOfLearner = maximumNumberOfLearner;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public void setLastUpdate(Date lastUpdate) {
        this.lastUpdate = lastUpdate;
    }

    public void setState(StateOfCourseEnum state) {
        this.state = state;
    }

    public void setNumberOfLearner(int numberOfLearner) {
        this.numberOfLearner = numberOfLearner;
    }

    /*----------------------------------ToString & HaschCode---------------------------------------------------------*/

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CourseEntity that = (CourseEntity) o;
        return maximumNumberOfLearner == that.maximumNumberOfLearner &&
                numberOfLearner == that.numberOfLearner &&
                Objects.equals(id, that.id) &&
                Objects.equals(title, that.title) &&
                Objects.equals(startDate, that.startDate) &&
                Objects.equals(lastUpdate, that.lastUpdate) &&
                state == that.state &&
                Objects.equals(idCreator, that.idCreator);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, title, maximumNumberOfLearner, startDate, lastUpdate, state, numberOfLearner, idCreator);
    }

    /*-----------------------------ToString------------------------------------------------------------------*/

    @Override
    public String toString() {
        return "CourseEntity{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", maximumNumberOfLearner=" + maximumNumberOfLearner +
                ", startDate=" + startDate +
                ", lastUpdate=" + lastUpdate +
                ", state=" + state +
                ", numberOfLearner=" + numberOfLearner +
                ", idCreatore=" + idCreator +
                '}';
    }



}
